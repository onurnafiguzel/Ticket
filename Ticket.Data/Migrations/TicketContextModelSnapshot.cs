// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticket.Data;

#nullable disable

namespace Ticket.Data.Migrations
{
    [DbContext(typeof(TicketContext))]
    partial class TicketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ibrahim@gmail.com",
                            Name = "İbrahim Ertan Yılmaz",
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            Email = "inac.orhan@outlook.com",
                            Name = "Orhan İnaç",
                            Status = false
                        });
                });

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.CustomerOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("OperationClaimId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OperationClaimId");

                    b.ToTable("CustomerOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OperationClaimId = 1
                        });
                });

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ProfilePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gender = 1,
                            Name = "Feyyaz Yiğit",
                            ProfilePath = "abc",
                            TmdbId = 5
                        });
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "enessolak.dev",
                            Name = "Enes Solak"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ongguzel@gmail.com",
                            Name = "Onur Güzel"
                        });
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BackdropPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ImdbId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("NowPlaying")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OriginalLanguage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TrailerUrl")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackdropPath = "backdroppath",
                            Description = "A drea film.",
                            Director = "Cristopher Nolan",
                            Duration = 148,
                            ImdbId = "imdbId",
                            NowPlaying = false,
                            OriginalLanguage = "English",
                            OriginalTitle = "123",
                            PosterPath = "posterpath",
                            Rating = 8.8000000000000007,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "status",
                            Title = "Inception"
                        },
                        new
                        {
                            Id = 2,
                            BackdropPath = "backdroppath",
                            Description = "Turkish philosophy movie",
                            Director = "Nuri Bilge Ceylan",
                            Duration = 188,
                            ImdbId = "imdbId",
                            NowPlaying = false,
                            OriginalLanguage = "Turkish",
                            OriginalTitle = "123",
                            PosterPath = "posterpath",
                            Rating = 8.0999999999999996,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "status",
                            Title = "Ahlat Ağacı"
                        });
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.MovieSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MovieId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TheatherId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TheatherId");

                    b.ToTable("MovieSessions");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.MovieTheatherSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int");

                    b.Property<int?>("TheatherId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("MovieTheatherSeats");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Theather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Theathers");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.TheatherSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TheatherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TheatherSeats");
                });

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.CustomerOperationClaim", b =>
                {
                    b.HasOne("Ticket.Application.Entities.Concrete.Customer", "Customer")
                        .WithMany("OperationClaims")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Application.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("Customers")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OperationClaim");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Cast", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Concrete.Actor", "Actor")
                        .WithMany("Casts")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.MovieGenre", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Concrete.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("Ticket.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.MovieSession", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("MovieSessions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Concrete.Theather", "Theather")
                        .WithMany("MovieSessions")
                        .HasForeignKey("TheatherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Theather");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.MovieTheatherSeat", b =>
                {
                    b.HasOne("Ticket.Application.Entities.Concrete.Customer", null)
                        .WithMany("MovieTheatherSeats")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("MovieTheatherSeats");

                    b.Navigation("OperationClaims");
                });

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.OperationClaim", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Actor", b =>
                {
                    b.Navigation("Casts");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Movie", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("MovieSessions");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Theather", b =>
                {
                    b.Navigation("MovieSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
