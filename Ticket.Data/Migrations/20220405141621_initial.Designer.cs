// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticket.Data;

#nullable disable

namespace Ticket.Data.Migrations
{
    [DbContext(typeof(TicketContext))]
    [Migration("20220405141621_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.CustomerOperationClaim", b =>
                {
                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "OperationClaimId");

                    b.HasIndex("OperationClaimId");

                    b.ToTable("CustomerOperationClaims");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            OperationClaimId = 1,
                            Id = 1
                        });
                });

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "enessolak.dev",
                            Name = "Enes Solak"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ongguzel@gmail.com",
                            Name = "Onur Güzel"
                        });
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ibrahim@gmail.com",
                            Name = "İbrahim Ertan Yılmaz",
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            Email = "inac.orhan@outlook.com",
                            Name = "Orhan İnaç",
                            Status = false
                        });
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A drea film.",
                            Director = "Cristopher Nolan",
                            Duration = 148,
                            Name = "Inception",
                            Rating = 8.8000000000000007
                        },
                        new
                        {
                            Id = 2,
                            Description = "Turkish philosophy movie",
                            Director = "Nuri Bilge Ceylan",
                            Duration = 188,
                            Name = "Ahlat Ağacı",
                            Rating = 8.0999999999999996
                        });
                });

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.CustomerOperationClaim", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Concrete.Customer", "Customer")
                        .WithMany("OperationClaims")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Application.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("Customers")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OperationClaim");
                });

            modelBuilder.Entity("Ticket.Application.Entities.Concrete.OperationClaim", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("OperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
